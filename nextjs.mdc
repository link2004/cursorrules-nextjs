- Next.js原則
    - App Router
    - TypeScript
        - lintエラーを回避する
    - Server ActionsとAPI Routesの適切な使い分け
        - ServerActions
            - コードの分離が少なく、コンポーネントとサーバーサイドロジックが密接に結びつく場合に使用
        - API Routes
            - サーバーサイドロジックを明確に分離したい場合に使用
            - 他のシステムからも使用する場合に使用
- ディレクトリ構成
    - app/
        - Next.jsのルーティングとページコンポーネント
        - サブディレクトリ:
            - protected/ - 認証が必要なページ
            - auth/ - 認証関連のページ
            - (auth-pages)/ - グループ化された認証ページ
    - components/
        - ロジックを含まない再利用可能なUIコンポーネント
        - サブディレクトリ:
            - ui/ - 基本的なUIコンポーネント
            - typography/ - テキスト関連コンポーネント
            - tutorial/ - チュートリアル用コンポーネント
    - lib/
        - ユーティリティ関数やヘルパー
    - utils/
        - ユーティリティ関数
        - サブディレクトリ:
            - supabase/ - Supabase関連のユーティリティ
    - hooks/
        - カスタムReactフック
- Next.jsの設計
    - データ取得・表示で分割
        - ユーザー操作に基づかないデータ取得
            - ServerComponentsで行う
            - 呼び出し元と同じディレクトリに配置
        - ユーザー操作に基づくデータ取得
            - ClientComponentsで、ServerActions&useSWR()&mutate()による楽観的更新を用いる
            - componentsディレクトリに配置
        - データ表示
            - ClientComponentsで行う
            - componentsディレクトリに配置
    - データ操作
        - 原則、ServerActionsで実装する（例: @app/actions.ts）
        - データ操作時にはrevalidateが必須
    - UI
        - Shadcn/uiを積極的に用いる (components.jsonで設定)
        - アイコン
            - lucide-reactを積極的に用いる
        - レスポンシブ対応
        - コンポーネント分割を適切に行う
            - 大きな単位ではファイルごと分割
            - 再利用可能なUIはcomponents/に配置
    - グローバルな状態管理
        - どうしても必要な場合のみ、zustandを用いる
    - パフォーマンスの最適化
        - `use client`、useEffect、useState の使用は最小限にし、ServerComponents (RSC) を優先
        - クライアントコンポーネントはフォールバック付きの Suspense でラップ
        - 重要でないコンポーネントは動的読み込みを利用
        - 画像は'next/image'を用いる
        - <a href="/url~~">は用いず、<Link> `next/link`を用いる。
        - Next.js ではルートベースのコード分割を実装する
    - フォーム入力とバリデーション
        - フォーム入力には制御コンポーネントを使用する
        - クライアントサイドおよびサーバーサイドでフォームバリデーションを実装する
        - 複雑なフォームの場合、react-hook-form などのライブラリの利用を検討する
        - スキーマバリデーションには Zodを使用する
    - エラーハンドリングとバリデーション
        - エラー処理とエッジケースを優先する
        - 関数の最初にエラーやエッジケースを処理する
        - 深いネストを避けるため、エラー条件では早期リターンを使用する
        - 成功パス（happy path）は関数の最後に配置し、可読性を向上させる
        - 不要な else 文は避け、if-return パターンを採用する
        - 前提条件や無効な状態はガード句で早期に処理する
        - 適切なエラーログ記録とユーザーフレンドリーなエラーメッセージを実装する
        - server actionsでは、予想されるエラーを戻り値としてモデル化する
    - アクセシビリティ
        - セマンティックな HTML 要素を使用する。
        - 適切な ARIA 属性を実装する
        - キーボード操作のサポートを確実に行う
    - セキュリティ
        - ユーザー入力はサニタイズし、XSS 攻撃を防止
        - サニタイズ済みのコンテンツであっても、`dangerouslySetInnerHTML`の使用は必要最小限に留める
    - 特に重要な原則
        - テーマ切り替えには'next-themes'を使用する（@components/theme-switcher.tsx参照）
        - 認証関連の処理はmiddlewareを活用する（@middleware.ts参照）
        - URL の検索パラメーター状態管理には'nuqs' を使用する
        - `use client` の使用は制限する
            - サーバーコンポーネントおよびNext.js の SSR を優先する。
            - 小規模なコンポーネントでの WebAPI アクセスのためにのみ使用する
            - データ取得や状態管理には使用しない
        - Next.js のドキュメントに従い、データ取得、レンダリング、ルーティングを実装する。
